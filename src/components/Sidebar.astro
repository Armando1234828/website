---
import type { Props } from '@astrojs/starlight/props';
import Default from "@astrojs/starlight/components/Sidebar.astro";
import { Icon } from '@astrojs/starlight/components';

const page = Astro.props.entry?.id.split("/");
const isValid = !["music", "invite"].includes(page[1]) && ["functions"].includes(page[0]);

let githubURL = page.join("/").replace(".md", ".js");
githubURL = `https://github.com/AkaruiDevelopment/aoi.js/blob/v6/src/${githubURL}`;
---

<Default {...Astro.props}><slot /></Default>

<div class="sl-container">
  <a class="sl-link" href="/contributors"><Icon name="external" />Contributors</a>
  {isValid && (<a class="sl-link" href={githubURL}><Icon name="github" />Source</a>)}
  <a class="sl-link" href={Astro.props?.editUrl?.href} target="_blank"><Icon name="pencil" />Edit Page</a>
</div>

<style>
  .sl-container {
    display: flex;
    align-items: center;
    justify-content: space-between;
    margin-bottom: 5rem;
  }

  .sl-link {
    text-decoration: none;
    padding: 4px 5px;
    color: var(--sl-color-text-accent);
  }
</style>
<script is:inline>
  (() => {
    const sidebarContent = document.getElementById('starlight__sidebar')?.firstElementChild;

    if (sidebarContent) {
      // open ancestor details of the active item
      const activeLinkDetailElements = [
        ...sidebarContent.querySelectorAll('details:has(a[aria-current="page"])')
      ];

      activeLinkDetailElements.forEach((detail) => {
        detail.setAttribute('open', '');
      });

      const detailElements = [...sidebarContent.querySelectorAll('details')];

      // Restore state from previous navigation
      // (but keep the active item's ancestors open regardless)
      const key = 'sl-sidebar-state';
      const savedStateJson = sessionStorage.getItem(key);

      if (savedStateJson) {
        let savedState;

        try {
          savedState = JSON.parse(savedStateJson);
        } catch (e) {
          console.error('Error parsing saved position:', e);
        }

        if (savedState) {
          savedState.details.forEach((isOpen, i) => {
            if (isOpen) {
              detailElements[i].setAttribute('open', '');
            } else if (!activeLinkDetailElements.includes(detailElements[i])) {
              detailElements[i].removeAttribute('open');
            }
          });

          sidebarContent.scrollTop = savedState.scrollTop;
        }
      }

      // Scroll the active list item into view if necessary
      const activeLi = sidebarContent.querySelector('a[aria-current="page"]').parentElement;
      if (activeLi) {
        const sidebarRect = sidebarContent.getBoundingClientRect();
        const liRect = activeLi.getBoundingClientRect();
        if (liRect.top < sidebarRect.top || liRect.bottom > sidebarRect.bottom) {
          activeLi.scrollIntoView({ behavior: 'instant', block: 'nearest' });
        }
      }

      // Save user state before navigating
      window.addEventListener('beforeunload', () => {
        sessionStorage.setItem(
          key,
          JSON.stringify({
            details: detailElements.map((detail) => detail.hasAttribute('open')),
            scrollTop: sidebarContent.scrollTop
          })
        );
      });
    }
  })();
</script>
